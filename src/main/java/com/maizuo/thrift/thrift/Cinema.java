/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.maizuo.thrift.thrift;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class Cinema implements org.apache.thrift.TBase<Cinema, Cinema._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Cinema");

  private static final org.apache.thrift.protocol.TField CINEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cinemaId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CINEMA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cinemaName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("isUse", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField HALL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hallCount", org.apache.thrift.protocol.TType.I32, (short)4);

  public int cinemaId;
  public String cinemaName;
  public boolean isUse;
  public int hallCount;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CINEMA_ID((short)1, "cinemaId"),
    CINEMA_NAME((short)2, "cinemaName"),
    IS_USE((short)3, "isUse"),
    HALL_COUNT((short)4, "hallCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CINEMA_ID
          return CINEMA_ID;
        case 2: // CINEMA_NAME
          return CINEMA_NAME;
        case 3: // IS_USE
          return IS_USE;
        case 4: // HALL_COUNT
          return HALL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CINEMAID_ISSET_ID = 0;
  private static final int __ISUSE_ISSET_ID = 1;
  private static final int __HALLCOUNT_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CINEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("cinemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CINEMA_NAME, new org.apache.thrift.meta_data.FieldMetaData("cinemaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_USE, new org.apache.thrift.meta_data.FieldMetaData("isUse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HALL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("hallCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Cinema.class, metaDataMap);
  }

  public Cinema() {
  }

  public Cinema(
    int cinemaId,
    String cinemaName,
    boolean isUse,
    int hallCount)
  {
    this();
    this.cinemaId = cinemaId;
    setCinemaIdIsSet(true);
    this.cinemaName = cinemaName;
    this.isUse = isUse;
    setIsUseIsSet(true);
    this.hallCount = hallCount;
    setHallCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Cinema(Cinema other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.cinemaId = other.cinemaId;
    if (other.isSetCinemaName()) {
      this.cinemaName = other.cinemaName;
    }
    this.isUse = other.isUse;
    this.hallCount = other.hallCount;
  }

  public Cinema deepCopy() {
    return new Cinema(this);
  }

  @Override
  public void clear() {
    setCinemaIdIsSet(false);
    this.cinemaId = 0;
    this.cinemaName = null;
    setIsUseIsSet(false);
    this.isUse = false;
    setHallCountIsSet(false);
    this.hallCount = 0;
  }

  public int getCinemaId() {
    return this.cinemaId;
  }

  public Cinema setCinemaId(int cinemaId) {
    this.cinemaId = cinemaId;
    setCinemaIdIsSet(true);
    return this;
  }

  public void unsetCinemaId() {
    __isset_bit_vector.clear(__CINEMAID_ISSET_ID);
  }

  /** Returns true if field cinemaId is set (has been assigned a value) and false otherwise */
  public boolean isSetCinemaId() {
    return __isset_bit_vector.get(__CINEMAID_ISSET_ID);
  }

  public void setCinemaIdIsSet(boolean value) {
    __isset_bit_vector.set(__CINEMAID_ISSET_ID, value);
  }

  public String getCinemaName() {
    return this.cinemaName;
  }

  public Cinema setCinemaName(String cinemaName) {
    this.cinemaName = cinemaName;
    return this;
  }

  public void unsetCinemaName() {
    this.cinemaName = null;
  }

  /** Returns true if field cinemaName is set (has been assigned a value) and false otherwise */
  public boolean isSetCinemaName() {
    return this.cinemaName != null;
  }

  public void setCinemaNameIsSet(boolean value) {
    if (!value) {
      this.cinemaName = null;
    }
  }

  public boolean isIsUse() {
    return this.isUse;
  }

  public Cinema setIsUse(boolean isUse) {
    this.isUse = isUse;
    setIsUseIsSet(true);
    return this;
  }

  public void unsetIsUse() {
    __isset_bit_vector.clear(__ISUSE_ISSET_ID);
  }

  /** Returns true if field isUse is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUse() {
    return __isset_bit_vector.get(__ISUSE_ISSET_ID);
  }

  public void setIsUseIsSet(boolean value) {
    __isset_bit_vector.set(__ISUSE_ISSET_ID, value);
  }

  public int getHallCount() {
    return this.hallCount;
  }

  public Cinema setHallCount(int hallCount) {
    this.hallCount = hallCount;
    setHallCountIsSet(true);
    return this;
  }

  public void unsetHallCount() {
    __isset_bit_vector.clear(__HALLCOUNT_ISSET_ID);
  }

  /** Returns true if field hallCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHallCount() {
    return __isset_bit_vector.get(__HALLCOUNT_ISSET_ID);
  }

  public void setHallCountIsSet(boolean value) {
    __isset_bit_vector.set(__HALLCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CINEMA_ID:
      if (value == null) {
        unsetCinemaId();
      } else {
        setCinemaId((Integer)value);
      }
      break;

    case CINEMA_NAME:
      if (value == null) {
        unsetCinemaName();
      } else {
        setCinemaName((String)value);
      }
      break;

    case IS_USE:
      if (value == null) {
        unsetIsUse();
      } else {
        setIsUse((Boolean)value);
      }
      break;

    case HALL_COUNT:
      if (value == null) {
        unsetHallCount();
      } else {
        setHallCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CINEMA_ID:
      return new Integer(getCinemaId());

    case CINEMA_NAME:
      return getCinemaName();

    case IS_USE:
      return new Boolean(isIsUse());

    case HALL_COUNT:
      return new Integer(getHallCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CINEMA_ID:
      return isSetCinemaId();
    case CINEMA_NAME:
      return isSetCinemaName();
    case IS_USE:
      return isSetIsUse();
    case HALL_COUNT:
      return isSetHallCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Cinema)
      return this.equals((Cinema)that);
    return false;
  }

  public boolean equals(Cinema that) {
    if (that == null)
      return false;

    boolean this_present_cinemaId = true;
    boolean that_present_cinemaId = true;
    if (this_present_cinemaId || that_present_cinemaId) {
      if (!(this_present_cinemaId && that_present_cinemaId))
        return false;
      if (this.cinemaId != that.cinemaId)
        return false;
    }

    boolean this_present_cinemaName = true && this.isSetCinemaName();
    boolean that_present_cinemaName = true && that.isSetCinemaName();
    if (this_present_cinemaName || that_present_cinemaName) {
      if (!(this_present_cinemaName && that_present_cinemaName))
        return false;
      if (!this.cinemaName.equals(that.cinemaName))
        return false;
    }

    boolean this_present_isUse = true;
    boolean that_present_isUse = true;
    if (this_present_isUse || that_present_isUse) {
      if (!(this_present_isUse && that_present_isUse))
        return false;
      if (this.isUse != that.isUse)
        return false;
    }

    boolean this_present_hallCount = true;
    boolean that_present_hallCount = true;
    if (this_present_hallCount || that_present_hallCount) {
      if (!(this_present_hallCount && that_present_hallCount))
        return false;
      if (this.hallCount != that.hallCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Cinema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Cinema typedOther = (Cinema)other;

    lastComparison = Boolean.valueOf(isSetCinemaId()).compareTo(typedOther.isSetCinemaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCinemaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cinemaId, typedOther.cinemaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCinemaName()).compareTo(typedOther.isSetCinemaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCinemaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cinemaName, typedOther.cinemaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUse()).compareTo(typedOther.isSetIsUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUse, typedOther.isUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHallCount()).compareTo(typedOther.isSetHallCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHallCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hallCount, typedOther.hallCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CINEMA_ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.cinemaId = iprot.readI32();
            setCinemaIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CINEMA_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.cinemaName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // IS_USE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.isUse = iprot.readBool();
            setIsUseIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // HALL_COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.hallCount = iprot.readI32();
            setHallCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CINEMA_ID_FIELD_DESC);
    oprot.writeI32(this.cinemaId);
    oprot.writeFieldEnd();
    if (this.cinemaName != null) {
      oprot.writeFieldBegin(CINEMA_NAME_FIELD_DESC);
      oprot.writeString(this.cinemaName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_USE_FIELD_DESC);
    oprot.writeBool(this.isUse);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HALL_COUNT_FIELD_DESC);
    oprot.writeI32(this.hallCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Cinema(");
    boolean first = true;

    sb.append("cinemaId:");
    sb.append(this.cinemaId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cinemaName:");
    if (this.cinemaName == null) {
      sb.append("null");
    } else {
      sb.append(this.cinemaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isUse:");
    sb.append(this.isUse);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hallCount:");
    sb.append(this.hallCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

